public class LoopFor1 {
	public static void main(String[] args) {
		// "반복"이라는 문자열 5번 출력하기
		for (int i = 0; i <5; i++) { // for문은 괄호 안의 ; 구분 중 제일 앞부분으로 들어온다
									// 이 제일 앞부분을 선언문이라고 하는데, 변수를 선언하는 것
									// 두번째는 조건식 부분으로 true 또는 false 두가지의 값이 온다. true 일때는 중괄호 안으로 들어간다
									// 중괄호 안의 내용이 끝나면 돌아와서 마지막 부분(3번째)으로 들어가서 수행 후 다시 조건식(2번째)으로 간다
									// false 가 되면 중괄호의 밖으로 나가서 다시 흐름을 수행한다
		// for ( ; ; ) { 로도 동작은 한다
		// 이미 사용하고 있는 변수가 있어서 변수의 조건부가 필요없다 싶으면 1번째, 3번째를 빼도 된다
		// 중간의 칸(2번째)이 비워져있으면 true로 판별됨
			System.out.println("출력");
		} // 수행하고자하는 반복이 몇번을 할 것인지 숫자를 세면서 하는 대부분의 표현들은 for문이고		
		// ~할때까지라는 이름처럼 조건이 충족될때까지 계속해서(몇번을 할 것인지는 모르겠지만) 반복하는 것은 while문이다
		// 무조건 둘 중 하나를 그에 맞게 써야하는건 아니고 대부분의 상황에서 이렇게 써주면 개발자들이 이해하기 쉽기 때문에 이렇게 쓴다
		/* System.out.println(i);
			int i; 가 for문 안의 지역변수로 치기 때문에 바깥에 i 변수를 쓰면 사라졌기 때문에 컴파일 에러가 난다 */
		
		// 기존 while 반복문
		/* int i = 0;
		while (i < 5) {
			System.out.println("출력");
			i++; */
		
		// 1부터 10까지 출력하기 (for)
		/* for (int i = 1; i <= 10; i++) {
			System.out.println(i);
		} */
		
		// 21부터 30까지의 3의 배수 출력하기
		/* for (int i = 21; i <= 30; i += 3) {
			System.out.println(i);
		} */
		
		// 30 29 28 ... 20 까지 역순 출력
		for (int i = 30; i >= 20; i--) {
			System.out.println(i);
		}
	}
}

/* public class MyClass {
	다른 메소드 {
		// 문장 1
		변수 선언. 초기화.
		변수 선언. 초기화.
		변수 선언. 초기화.
		변수 선언. 초기화. //이렇게 변수가 계속 생기면 쌓일 것임
	} // 공간을 효율적으로 쓰기 위해 변수는 중괄호를 빠져나가면 사라짐
	
	다른 메소드2 {
		// 문장 2
	}
	
	public static void main(String[] args) {
		// 메인 문장
		// 변수. 초기화.
	}
	
	int i = 0;
	while (i < 10) { // while문은 위에 i를 더 큰 범위에서 변수선언을 하고
		i++;
	}
	
	for (int i = 0; i <5; i++) { // for문은 지역변수로 i를 쓰고나면 없애버린다
		System.out.println("출력");
	}
	int i; // 그래서 i는 이미 없어졌기 때문에 새로운 i를 변수 선언 할 수 있다
} */